import pytest
from libaoc.matrix import load_string_matrix
from aoc_2019.day_19 import detect_ray_surface, DroneController, locate_square
from aoc_2019.intcode import EndProgram

EXAMPLE_1 = """
#..........
.#.........
..##.......
...###.....
....###....
.....####..
......####.
......#####
.......####
........###
.........##
"""

EXAMPLE_2 = """
#.........
..........
..........
..#.......
..........
...#......
....#.....
.....#....
.....#....
......#...
......##..
"""

class FakeRunner:
    def __init__(self, matrix):
        self.mat = matrix
        self.x = None
        self.y = None

    def __iter__(self):
        return self

    def __next__(self):
        return self.mat[self.x, self.y]

    def copy(self):
        return FakeRunner(self.mat)

    def send(self, value):
        assert value >= 0
        if self.x is None:
            self.x = value
        elif self.y is None:
            self.y = value
        else:
            raise EndProgram


@pytest.mark.parametrize("data,surface", [(EXAMPLE_1, 27), (EXAMPLE_2, 7)])
def test_beam_surface(data, surface):
    beam_mat = load_string_matrix(data).transpose()
    controller = DroneController(FakeRunner(beam_mat == "#"))
    assert detect_ray_surface(controller, size=10) == surface


BIG_EXAMPLE = """
#.......................................
.#......................................
..##....................................
...###..................................
....###.................................
.....####...............................
......#####.............................
......######............................
.......#######..........................
........########........................
.........#########......................
..........#########.....................
...........##########...................
...........############.................
............############................
.............#############..............
..............##############............
...............###############..........
................###############.........
................#################.......
.................########OOOOOOOOOO.....
..................#######OOOOOOOOOO#....
...................######OOOOOOOOOO###..
....................#####OOOOOOOOOO#####
.....................####OOOOOOOOOO#####
.....................####OOOOOOOOOO#####
......................###OOOOOOOOOO#####
.......................##OOOOOOOOOO#####
........................#OOOOOOOOOO#####
.........................OOOOOOOOOO#####
..........................##############
..........................##############
...........................#############
............................############
.............................###########
"""

def test_locate_square():
    beam_mat = load_string_matrix(BIG_EXAMPLE).transpose()
    controller = DroneController(FakeRunner(beam_mat != "."))
    assert locate_square(controller, size=10) == (25, 20)
